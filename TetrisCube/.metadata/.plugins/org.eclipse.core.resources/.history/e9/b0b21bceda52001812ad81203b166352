package graphics;

import java.util.HashMap;
import java.util.LinkedList;

import com.jogamp.opengl.GL4;
import com.jogamp.opengl.util.glsl.ShaderState;

import graphics.Test.Tuple;

public class Block {
	public static class Tuple {
		@Override
		public int hashCode() {
			return x+y;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Tuple other = (Tuple) obj;
			if (x != other.x && x != other.y)
				return false;
			if (y != other.y && y != other.x)
				return false;
			return true;
		}

		int x;
		int y;
		
		public Tuple(int x, int y) {
			this.x = x;
			this.y = y;
		}	
		
	}
	
	LinkedList<Cube> cubes = new LinkedList<>();
	HashMap<int[], Integer> indices;
	
	public Block(GL4 gl, ShaderState st, int[][][] b, int[] offset, float[] c) {
		int[] first = null;
		for (int i=0; i<b.length; i++) {
			for (int j=0; j<b[i].length; j++) {
				for (int k=0; k<b[i][j].length; k++) {
					if (b[i][j][k] == 1) {
						first = first == null ? new int[] {i,j,k} : first;
						cubes.add(new Cube(gl, st, c, new int[] {i-first[0]+offset[0],j-first[1]+offset[1],k-first[2]+offset[2]}));
					}
				}
			}
		}
	}
	
	public void draw() {
		for (Cube c : cubes) {
			c.draw();
		}
	}
}
